「材料」データに関する前処理の概略と使い方 

------------------------ 
概略 

 4つのファイルに分かれている. ★印は特に正規表現による置換の粒度が異なる一括操作. 
 (1) charFilters.py (主にリストの列を扱う / 前処理フィルタ) 
    ★文字列からなる ある1列 (pandas.Series) のすべての要素に対して 正規表現による置換をおこなう関数 
    ・配列書式の文字列からなる ある1列のすべての要素に対して 文字列の配列への変換をおこなう関数
    ★文字列の配列からなる ある1列のすべての配列の要素に対して 正規表現による置換をおこなう関数 
    ・文字列の配列からなる ある1列のすべての配列の要素に対して 出力をおこなう関数 

 (2) pairListFilters.py (主にリストのリストの列を扱う / 組の配列の前処理フィルタ)
    ・組の書式の文字列から組へ変換する関数 
    ・組の配列の書式の文字列からなる ある1列のすべての要素に対して 文字列の組の配列への変換をおこなう関数
    ・組の指定した要素に対して 正規表現による置換をおこなう関数
    ★文字列の組の配列からなる ある1列のすべての指定した組の要素に対して 正規表現による置換をおこなう関数
    ・材料と分量の組のリストを得る関数 

 (3) recipeYieldFilter.py (何人分かを得る前処理フィルタ) 
    ・全角数字を半角数字へ 
    ・何人分のためのレシピであるかを得る関数 
    ・[追加] 漢数字から半角数字への全単射 

 (4) servingFilters.py (1人分の分量を得る前処理フィルタ) 
    ・帯分数を小数へ 
    ・分数を小数へ 
    ・[追加] 分数 (日本語) を小数へ 
    ・1人あたり 
    ・材料と分量の組に対して, 何人分かから 1人分の材料と分量の組を得る関数
    ・1人分の分量を得る前処理フィルタ 
 (具体的な実装は各ファイル参照) 

------------------------ 
使い方 

例1. 1人分の分量を得るところまで一括操作でおこないたいとき. 

 特に 
        import servingFilters as sf
のもとで, 「何人分」recipeYield 列と, 「材料」recipeIngredient 列を含む 
pandas.DataFrame オブジェクト df に対して 
        df = sf.servingFilter(df)
とする. 
 (テスト実行例は getServingTest.py 参照) 
